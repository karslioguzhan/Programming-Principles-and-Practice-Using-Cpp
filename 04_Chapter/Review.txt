1. What is a computation?
    By computation we understand that we produce some kind of output for given input. 
    We use a function like "square" to produce a result (output) with arguments (input).

2. What do we mean by inputs and outputs to a computation? Give examples.
    A input is a argument that is given to program or function, which is used for the computation. 
    A output is the result of an computation which is provided after a program or functions runs. 
    Like if use the function square(2) the "2" is the input and the result will be "4" (output).

3. What are the three requirements a programmer should keep in mind when expressing computations?
    The three requirements for correct computation are:
        - correctness
        - simplicity
        - efficiency

4. What does an expression do?
    A expression computes a value from a number of operands. Simple expressions are literal values like 10 or "Norah".
    A variable represents a expression to like: int length = 20;

5. What is the difference between a statement and an expression, as described in this chapter?
    A expression computes a value from a set of operands using operations. A statement can produce many output and can read inputs.
    Also a statement can be do expressions many times. A example statement:
        a = b;
            "=" is a an operators --> in this case a assignment operator
            "a = b" is an expression --> assign b to a
            And with an ";" this becomes an statement.
    The are two kinds of statements:
        - expression statement
        - declarations

6. What is an lvalue? List the operators that require an lvalue. Why do these operators, and not the others, require an lvalue?
    An lvalue is for short a value that appears on the left side of an operand and mostly the one value that will be modified. 
    The complement to lvalue is rvalue, that is, an expression that identifies something that may not be modified or have its address taken, 
    such as a value returned from a function (&f(x) is an error because f(x) is an rvalue).
    operators that require an lvalue for example are:
        - assignment like a = b;
        - pre/post increment ++a; a++;

7. What is a constant expression?
    A constant expression are expressions that we don't want to change in our code. For example a pi could be an constant expression.
    After initialization of an constant expression like "constexpr double pi{3.14159}" you cannot change the value.

8. What is a literal?
    Literals represent values of various types. For example, the literal 12 represents the integer value “twelve”, 
    "Morning" represents the character string value Morning, and true represents the Boolean value true.

9. What is a symbolic constant and why do we use them?
    C++ offers the notion of a symbolic constant, that is, a named object to which you can’t give a new value after it has been initialized. For example:
        constexpr double pi = 3.14159;

10. What is a magic constant? Give examples.
    Non obvious literals in code considered to be magic constants, because it is not clear what this value stands for.
    Like if you want to compute:
        meter = lengthInch * 0.0254; --> In this context it is clear what the number does but for other cases this magic numbers are irritating.

11. What are some operators that we can use for integers and floating-point values?
    We can use following operators for float and integers:
        + --> Addition
        - --> Subtraction
        >= greater than

12. What operators can be used on integers but not on floating-point numbers?
    The modulo operator "%" which gives the remainder as a result can only be used for integers.

13. What are some operators that can be used for strings?
    For strings we can use addition "+" , assignment "=" or check for equality "==".

14. When would a programmer prefer a switch-statement to an if-statement?
    The switch and if statements are selections. You should prefer switch statements if you have many possible selections. With if-statemens you have to nest many if else if etc. Because of that switch statements are more clear.

15. What are some common problems with switch-statements?
    - The Syntax of an switch statement is slightly archaic. 
    - You can only use chars, enumerations or integers
    - The case labels must be constant expression
    - You have to end each case with an break.

16. What is the function of each part of the header line in a for-loop, and in what sequence are they executed?
    A for loop is like an while statement, but you have the sequence control inside the header. 
    For example:
        for (int numIteration{0}; numIteration < 10; ++numIteration)
        {
            std::cout << numIteration << std::endl;
        }
        The header have the initialization of an integer, after that you have the condition to finish the loop and lastly with the third argument you decide what you do after each iteration. In this example we increment the value of numIteration with one. (initialization, condition, increment)

17. When should the for-loop be used and when should the while-loop be used?
    If you have to modify the loop variable inside a iteration you should consider using a while loop. For loops are great when you know how many times you want to iterate.

18. How do you print the numeric value of a char?
    - You can use typecasting --> int('a');
    - You can use static cast --> static_cast<int>('a');

19. Describe what the line char foo(int x) means in a function definition.
    This lines means we use an integer x for the function foo as an input and after a computation we get an char as result.

20. When should you define a separate function for part of a program? List reasons.
    - You want to use a sequence of computation more than once
    - More readable code
    - Separation of the computation logically
    - Easier testing

21. What can you do to an int that you cannot do to a string?
    We can use the modulo operator for an integer.

22. What can you do to a string that you cannot do to an int?
    We can use member functions of string which the type int doesn't have.

23. What is the index of the third element of a vector?
    The index of the third element is "2" because we start counting by 0.

24. How do you write a for-loop that prints every element of a vector?
    We used range-for-loop (sometimes called foreach loop) to iterate through a vector. In this example it would be look like this:
        std::vector<int> test {1,2,3};
        for (int numTest : test)
        {
            std::cout << numTest << std::endl;
        }

25. What does vector<char> alphabet(26); do?
    This initializes a vector that can hold 26 elements of type char which are initialized to '\0', the null/empty char.

26. Describe what push_back() does to a vector.
    The push_back() member-function puts an new value in the end of the vector.

27. What do vector’s member functions begin(), end(), and size() do?
    The member functions begin() and end() of a vector return iterators, begin and end; they identify the beginning and the end of the sequence. An STL sequence is what is usually called “half-open”; that is, the element identified by begin is part of the sequence, but the end iterator points one beyond the end of the sequence. The usual mathematical notation for such sequences (ranges) is [begin:end). An iterator is an object that identifies an element of a sequence. The member function size() returns the number of elements stored in a vector. The call v.size() gives the number of elements of the vector called v. In general, v.size() gives us the ability to access elements of a vector without accidentally referring to an element outside the vector’s range. The range for a vector v is [0:v.size()). That’s the mathematical notation for a half-open sequence of elements. The first element of v is v[0] and the last v[v.size()–1]. If v.size==0, v has no elements, that is, v is an empty vector. This notion of half-open sequences is used throughout C++ and the C++ standard library (§17.3, §20.3).

28. What makes vector so popular/useful?
    A vector is similar to an array in C and other languages. However, you need not specify the size (length) of a vector in advance, and you can add as many elements as you like. The C++ standard vector has other useful properties.

29. How do you sort the elements of a vector?
    A vector is similar to an array in C and other languages. However, you need not specify the size (length) of a vector in advance, and you can add as many elements as you like. The C++ standard vector has other useful properties.