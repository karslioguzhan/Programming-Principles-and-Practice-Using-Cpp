1. What is the purpose of working on the program after the first version works? Give a list of reasons.
    - The first version is mostly full of bugs and logical errors
    - We want to add new features
    - We want to improve performanceS

2. Why does 1+2; q typed into the calculator not quit after it receives an error?
    - Cannot reconstruct the error with my compiler

3. Why did we choose to make a constant character called number?
    - This constant representing all numeric values and is inserted into Tokens kind member variable. 

4. We split main() into two separate functions. What does the new function do and why did we split main()?
    - We split the main because the first section deals with correct running
    - The second section is for error handling (divided into know and unknown errors)

5. Why do we split code into multiple functions? State principles.
    - We mostly split code for better readability and easier debugging
    - We split "calculations" into logical functions that does a specific job 

6. What is the purpose of commenting and how should it be done?
    - The purpose of commenting is to make comprehending easier for a different person 
    - The purpose is not write the code into human language, because mostly person with understanding of this language reads the code

7. What does narrow_cast do?
    - narrow_cast ensures that no information is lost while casting

8. What is the use of symbolic constants?
    - Symbolic constants are values that represent a type with a arbitrary selected value. For example '8' is in the calculator program 
    - the representation of numeric values

9. Why do we care about code layout?
    - Better readability
    - Bugs can better hide in "ugly" code

10. How do we handle % (remainder) of floating-point numbers?
    - Checking with fmod(d,1) != 0

11. What does is_declared() do and how does it work?
    - Checks if the declaration is done before
    - Preventing double declaration

12. The input representation for let is more than one character. How is it accepted as a single token in the modified code?
    - We check in the default case in the switch if the concatenated string s is equal to let
    - If this is true than we create a token with a single letter 

13. What are the rules for what names can and cannot be in the calculator program?
    - The names should be misleading like pi is unequal to the mathematical pi
    - Non asci letters are not supported

14. Why is it a good idea to build a program incrementally?
    - It provides the possibility to test logical units after moving on to the next logical
    - Easier to catch errors 

15. When do you start to test?
    - As soon you can compile your code

16. When do you retest?
    - When project is finished or a change is made

17. How do you decide what should be a separate function?
    - A function should do only one job 
    - A function must be logically divided from other tasks

18. How do you choose names for variables and functions? List possible reasons.
    - The name of a variable should represent its function 'i' is a bad example because no one what it is
    - Better alternative for iterations are for example 'numIteration' or 'numElement' if iterating through a vector

19. Why do you add comments?
    - To grasp the idea of this section

20. What should be in comments and what should not?
    - Rewriting the code in "human" language

21. When do we consider a program finished?
    - When it does the specified job good enough with the resources we want to invest