1. What is the difference between a declaration and a definition?
    - A declaration is a statement that introduce a name into a scope with its type
    - A definition specifies exactly what a name refers to and sets memory aside for that variable
    --> Multiple declarations are possible but not multiple definitions

2. How do we syntactically distinguish between a function declaration and a function definition?
    - A function declaration supplies the type and can be understood as an interface to describe the function
    - A function definition supplies the function body and what statements need to be executed

3. How do we syntactically distinguish between a variable declaration and a variable definition?
    - Declaration supplies the type
    - Definition supplies the object (the memory)

4. Why can't you use the functions in the calculator program from Chapter 6 without declaring them first?
    - Because we need to forward declare the function to inform the compiler that this functions will be used but the definition is somewhere else
    - For large projects this is necessary to avoid time consuming designing which object to define first

5. Is int a; a definition or just a declaration?
    - This is only a declaration, because its only defines its type without providing a value

6. Why is it a good idea to initialize variables as they are declared?
    - Not all types will initialize/define variable when declared like strings or vectors
    - Because of this the value of the variable can be everything 

7. What can a function declaration consist of?
    - Pattern: "return type" "function name"("type of" arguments/parameter); (Semicolon is necessary if only declaring)
    - For example double squareRoot(double input)

8. What good does indentation do?
    - Better readability
    - Function bodies and scopes are easier to track

9. What are header files used for?
    - The header files are collections of of declarations which are included into source files if needed

10. What is the scope of a declaration?
    - From the point the declaration until the end of the scope (local/global etc.)

11. What kinds of scope are there? Give an example of each.
    - Global scope
        - The area of text outside any other scopes
        - For example  
            int i{}; --> global scope
            int main(){}
    - Namespace scope
        - namespace example{int i{};} --> i is inside the namespace scope
    - Class scope
        - Class C{ int i{};}
            - i is in the class scope (member variable)
    - Statement scope
        - For example
            for (int numElement; numElement<10; ++numElement) {}; --> numElement is a statement scope

12. What is the difference between a class scope and local scope?
    - The variables inside the class scope lives until the class is destroyed
    - The local scope variable are deleted as soon it reach the end 

13. Why should a programmer minimize the number of global variables?
    - The use of global variables should be as low as possible 
    - Because large programs have a lots of variable and if there are to many global variables it is difficult to guarantee if the global variable is still valid
    - It is possible to have collisions 

14. What is the difference between pass-by-value and pass-by-reference?
    - Pass-by-Value copies the object and the rvalue is passed
    - Pass-by-reference doesn't create a copy and gives the address of the variable (rvalue)

15. What is the difference between pass-by-reference and pass-by-const-reference?
    -  Pass-by-const-reference also providing the rvalue but guarantees that the value cannot be changed

16. What is a swap()?
    - A swap swapping two values. 
    - For example A = 10; B = 20; swap(A,B) --> A = 20; B = 10;

17. Would you ever define a function with a vector<double>-by-value parameter?
    - Probably not if i am not absolute sure that the vector will be very small

18. Give an example of undefined order of evaluation. Why can undefined order of evaluation be a problem?
    - Example:  int x = ++i + ++i;
    - This is a problem because every compiler can threat this different 

19. What do x&&y and x||y, respectively, mean?
    - Both are comparison operators first is "and" and the second is "or"

20. Which of the following is standard-conforming C++: functions within functions, functions within classes, classes within classes, classes within functions?
    - functions within functions
        - Not legal in C++
    - Function within classes 
        - Common and useful
    - Classes within classes
        - Useful but only in complex problems 
    - Classes within functions
        - Valid but not best practice --> Should be avoided

21. What goes into an activation record?
    - Locals of the callee
    - Return address of the caller
    - Parameters of the callee
    - Previous stack pointer

22. What is a call stack and why do we need one?
    - The call stack is a data structure which grows and shrinks with "Last in, first out"
    - Data structure that stores information about the active subroutines of a computer program

23. What is the purpose of a namespace?
    - To provide a tool for organizing functions, data, and types into a type
    - To prevent collisions for example of two identical function names

24. How does a namespace differ from a class?
    - Classes and structs define types. You can create an object of a type. 
    - Namespaces simply declare a scope inside which other types, functions, objects, or namespaces can exist.

25. What is a using declaration?
    - Introduces a name that is defined elsewhere into the declarative region where this using-declaration appears.

26. Why should you avoid using directives in a header?
    - The using declaration can call a unwanted function or provide a false variable.
    - For example you wanted to call B::func() but you have a using A::func; before you call just func()
        - This using call the A::func instead the wanted B::func

27. What is namespace std?
    - The std namespace is the namespace for the standard C++ library
        - This standard library is a collection of classes and function, which are part of the C++ ISO standard
